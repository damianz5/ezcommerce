<?php
/**
 * @copyright Copyright (C) eZ Systems AS. All rights reserved.
 * @license For full copyright and license information view LICENSE file distributed with this source code.
 */
namespace AppBundle\Installer;

use EzSystems\PlatformInstallerBundle\Installer\CleanInstaller;
use Symfony\Component\Filesystem\Filesystem;
use eZ\Publish\API\Repository\Repository;
use eZ\Publish\API\Repository\Values\Content\Query;
use eZ\Publish\API\Repository\Values\Content\Query\Criterion;
use eZ\Publish\Core\Repository\Values\Content\Content;
use Symfony\Component\Yaml\Yaml;

class EzCommerceCleanInstaller extends CleanInstaller
{
    use InstallerCommandExecuteTrait;

    /**
     * @var Repository
     */
    protected $repository;

    /**
     * @var EzPublishKernel
     */
    protected $kernel;

    public function setServices($repository, $kernel)
    {
        $this->repository = $repository;
        $this->kernel = $kernel;
    }

    public function importSchema()
    {
        //parent::importSchema();
    }

    public function importData()
    {
        $liveSchema = $this->db->getSchemaManager()->createSchema();
        $dbPlatform = $this->db->getDatabasePlatform();

        foreach (['kaliop_migrations', 'kaliop_migrations_contexts'] as $tableName) {
            if (!$liveSchema->hasTable($tableName)) {
                continue;
            }
            $this->db->exec($dbPlatform->getTruncateTableSQL($tableName));
        }

        $migrationCommands = [
            'doctrine:schema:update --dump-sql --force',
            'kaliop:migration:migrate --path vendor/silversolutions/silver.e-shop/install/migrations/kaliop_migrations/users/201804161300_users.yml -n',
            'kaliop:migration:migrate --path vendor/silversolutions/silver.e-shop/install/migrations/kaliop_migrations/content_types/201804161300_content_types.yml -n',
            'kaliop:migration:migrate --path vendor/silversolutions/silver.e-shop/install/migrations/kaliop_migrations/sections/201804161300_sections.yml -n',
            'kaliop:migration:migrate --path vendor/silversolutions/silver.e-shop/install/migrations/kaliop_migrations/content/Components/201804161300_components.yml -n',
            'kaliop:migration:migrate --path vendor/silversolutions/silver.e-shop/install/migrations/kaliop_migrations/content/Catalog/201804161300_product_catalog.yml -n',
            'kaliop:migration:migrate --path vendor/silversolutions/silver.e-shop/install/migrations/kaliop_migrations/roles/201804161300_roles.yml -n',
        ];

        foreach ($migrationCommands as $cmd) {
            $this->output->writeln(sprintf('executing migration: %s', $cmd));
            $this->executeCommand($this->output, $cmd, 0);
        }

        // remove reference yml generated by migration tool
        unlink("web/var/references.yml");

        $this->updateConfiguration();
    }

    public function importBinaries()
    {
        $this->output->writeln('Copying storage directory contents...');
        $fs = new Filesystem();
        $fs->mkdir('web/var/site');
    }

    protected function updateConfiguration()
    {
        if ($this->updateProductCatalogType()) {
            $this->output->writeln('updateProductCatalogType successfull');
        } else {
            $this->output->writeln('updateProductCatalogType failed');
        }

        $dummy = '';
        $setLocationResult = $this->repository->sudo(
            function() use($dummy)
            {
                return $this->setLocationIdShopUsers();
            }
        );

        if ($setLocationResult) {
            $this->output->writeln('setLocationIdShopUsers successfull');
        } else {
            $this->output->writeln('setLocationIdShopUsers failed');
        }

        if ($this->updateTexmoduleLocation()) {
            $this->output->writeln('updateTexmoduleLocation successfull');
        } else {
            $this->output->writeln('updateTexmoduleLocation failed');
        }
    }

    protected function updateProductCatalogType()
    {
        $content = $this->searchObject('Product Catalog');
        if ($content) {
            $config = $this->readParametersYml('ecommerce_parameters.yml');
            $config['parameters']['siso_core.default.product_catalog_content_type_id'] =
                $content->valueObject->contentInfo->contentTypeId;
            $this->writeParametersYml($config, 'ecommerce_parameters.yml');

            return true;
        }

        return false;

    }

    protected function setLocationIdShopUsers()
    {
        /** @var Content $content */
        $ShopUsersContent = $this->searchObject('Shop users');
        if ($ShopUsersContent) {
            $shopUsersId = $ShopUsersContent->valueObject->contentInfo->mainLocationId;
            $this->output->writeln('shopUsersId:'.$shopUsersId);

            $ShopUsersPrivateContent = $this->searchObject('Private customers');
            if ($ShopUsersPrivateContent) {
                $shopUsersPrivateId = $ShopUsersPrivateContent->valueObject->contentInfo->mainLocationId;
                $this->output->writeln('shopUsersPrivateId:'.$shopUsersPrivateId);
            }

            $ShopUsersBusinessContent = $this->searchObject('Business customers');
            if ($ShopUsersBusinessContent) {
                $shopUsersBusinessId = $ShopUsersBusinessContent->valueObject->contentInfo->mainLocationId;
                $this->output->writeln('shopUsersBusinessId:'.$shopUsersBusinessId);
            }

            //Set the id in config
            $config = $this->readParametersYml('ecommerce_parameters.yml');
            $config['parameters']['siso_core.default.user_group_location'] = (int)$shopUsersId;
            if (isset($shopUsersBusinessId)) {
                $config['parameters']['siso_core.default.user_group_location.business'] = (int)$shopUsersBusinessId;
            }
            if (isset($shopUsersPrivateId)) {
                $config['parameters']['siso_core.default.user_group_location.private'] = (int)$shopUsersPrivateId;
            }
            $this->writeParametersYml($config, 'ecommerce_parameters.yml');

            return true;
        }

        return false;
    }

    protected function updateTexmoduleLocation()
    {
        $content = $this->searchObject('Textmodules');
        if ($content) {
            $config = $this->readParametersYml('ecommerce_parameters.yml');
            $config['parameters']['silver_tools.default.translationFolderId'] =
                $content->valueObject->contentInfo->mainLocationId;
            $this->writeParametersYml($config, 'ecommerce_parameters.yml');

            return true;
        }

        return false;

    }

    protected function searchObject($name)
    {
        $searchService = $this->repository->getSearchService();
        $query = new Query();
        $criterion = array(
            new Criterion\Field('name', Criterion\Operator::EQ, $name),
        );
        $query->filter = new Criterion\LogicalAnd($criterion);
        $result = $searchService->findContent($query);

        if ($result->totalCount > 0) {
            return $result->searchHits[0];
        }

        return false;
    }

    protected function readParametersYml($filename = 'parameters.yml')
    {
        $parametersYmlPath = $this->getParametersYmlPath($filename);
        if ($parametersYmlPath) {
            return Yaml::parse(file_get_contents($parametersYmlPath));
        }

        return false;
    }

    protected function writeParametersYml($content, $filename = 'parameters.yml')
    {
        $parametersYmlPath = $this->getParametersYmlPath($filename);

        if (!$parametersYmlPath) {
            $parametersYmlPath = 'app/config/'.$filename;
        }

        $txtContent = Yaml::dump($content, 3);

        file_put_contents($parametersYmlPath, $txtContent);
    }

    protected function getParametersYmlPath($filename)
    {
        $configPath = $this->kernel->getRootDir() . '/config/';
        if (file_exists($configPath . $filename)) {
            return $configPath . $filename;
        }

        return false;
    }
}
